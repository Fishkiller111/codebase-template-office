# WebAI AI 项目开发规范

## 项目概述
这是一个基于 Nuxt 3 的现代化 Web 应用，提供 AI 代码生成和用户管理功能。项目采用 TypeScript、Tailwind CSS、Prisma ORM 和 PostgreSQL 技术栈。

## 核心架构

### 技术栈
- **前端框架**: Nuxt 3 + Vue 3 + TypeScript
- **样式框架**: Tailwind CSS
- **数据库**: PostgreSQL + Prisma ORM
- **认证系统**: JWT + bcryptjs
- **包管理器**: pnpm

### 项目结构
```
├── app.vue                 # 根组件
├── nuxt.config.ts         # Nuxt 配置文件
├── package.json           # 项目依赖配置
├── tailwind.config.js     # Tailwind 配置
├── tsconfig.json          # TypeScript 配置
├── components/            # Vue 组件
├── pages/                 # 页面路由
├── server/api/           # API 路由
├── composables/          # 组合式函数
├── middleware/           # 中间件
├── plugins/              # 插件
├── prisma/               # 数据库模式
├── lib/                  # 工具库
└── public/               # 静态资源
```

## 核心文件说明

### 配置文件
- [nuxt.config.ts](mdc:nuxt.config.ts) - Nuxt 3 主配置文件，包含模块、插件、CSS 等配置
- [tailwind.config.js](mdc:tailwind.config.js) - Tailwind CSS 配置
- [prisma/schema.prisma](mdc:prisma/schema.prisma) - 数据库模式定义

### 页面组件
- [pages/index.vue](mdc:pages/index.vue) - 首页，包含产品介绍和功能展示
- [pages/dashboard.vue](mdc:pages/dashboard.vue) - 仪表板页面，用户主要工作区域
- [pages/profile.vue](mdc:pages/profile.vue) - 个人资料页面，用户信息管理
- [pages/login.vue](mdc:pages/login.vue) - 登录页面
- [pages/register.vue](mdc:pages/register.vue) - 注册页面

### 核心组件
- [components/HeroSection.vue](mdc:components/HeroSection.vue) - 首页英雄区域
- [components/Navigation.vue](mdc:components/Navigation.vue) - 导航栏组件
- [components/BackgroundEffects.vue](mdc:components/BackgroundEffects.vue) - 背景特效组件

### 认证系统
- [composables/useAuth.ts](mdc:composables/useAuth.ts) - 认证组合式函数，包含登录、注册、用户状态管理
- [middleware/auth.ts](mdc:middleware/auth.ts) - 认证中间件
- [plugins/auth.client.ts](mdc:plugins/auth.client.ts) - 客户端认证插件

### API 路由
- [server/api/auth/](mdc:server/api/auth/) - 认证相关 API
  - [login.post.ts](mdc:server/api/auth/login.post.ts) - 用户登录
  - [register.post.ts](mdc:server/api/auth/register.post.ts) - 用户注册
  - [me.get.ts](mdc:server/api/auth/me.get.ts) - 获取当前用户信息
  - [logout.post.ts](mdc:server/api/auth/logout.post.ts) - 用户登出
- [server/api/user/](mdc:server/api/user/) - 用户管理 API
  - [profile.put.ts](mdc:server/api/user/profile.put.ts) - 更新用户资料
  - [password.put.ts](mdc:server/api/user/password.put.ts) - 修改密码
  - [avatar.post.ts](mdc:server/api/user/avatar.post.ts) - 上传头像（base64存储）

### 数据库
- [lib/prisma.ts](mdc:lib/prisma.ts) - Prisma 客户端配置
- [generated/prisma/](mdc:generated/prisma/) - Prisma 生成的类型定义

## 开发规范

### 代码风格
1. **语言**: 所有交流和注释使用中文
2. **组件命名**: 使用 PascalCase (如 `HeroSection.vue`)
3. **文件命名**: 
   - 页面使用 kebab-case (如 `login.vue`)
   - API 路由使用 `[method].ts` 格式
4. **变量命名**: 使用 camelCase

### 状态管理
- 使用 `useState` 进行状态管理
- 认证状态通过 `useAuth` 组合式函数管理
- 支持 localStorage 缓存用户信息

### 样式规范
- 使用 Tailwind CSS 进行样式开发
- 采用 Glass Morphism 设计风格
- 支持深色主题
- 使用渐变色和动画效果

### API 设计
- RESTful API 设计
- 统一的响应格式：`{ success: boolean, message: string, data?: any }`
- JWT 认证通过 httpOnly cookies
- 输入验证和错误处理

### 数据库设计
- 使用 Prisma ORM
- 用户头像采用 base64 格式存储
- 支持用户资料、密码管理
- 数据库迁移使用 `pnpm run db:push`

## 开发流程

### 环境设置
```bash
# 安装依赖
pnpm install

# 启动开发服务器
pnpm run dev

# 数据库操作
pnpm run db:push      # 推送数据库变更
pnpm run db:generate  # 生成 Prisma 客户端
```

### 新功能开发
1. 创建页面组件放在 `pages/` 目录
2. 创建 API 路由放在 `server/api/` 目录
3. 共享逻辑放在 `composables/` 目录
4. 数据库变更需要更新 `prisma/schema.prisma`

### 认证保护
- 需要认证的页面使用 `definePageMeta({ middleware: 'auth' })`
- API 路由通过 JWT 验证用户身份

## 特殊功能

### 头像系统
- 支持 JPEG、PNG、GIF、WebP 格式
- 文件大小限制 5MB
- 使用 base64 格式存储在数据库
- 客户端实时预览

### 个人资料管理
- 支持编辑/查看模式切换
- 实时数据同步到 localStorage
- 密码修改需要当前密码验证

### 用户界面
- 响应式设计
- 平滑动画效果
- 折叠菜单和交互反馈
- 现代化的 Glass Morphism 风格

## 注意事项

1. **不要私自新增独立模块**: 所有新功能都应该集成到现有架构中
2. **数据一致性**: 用户信息更新后需要同步到状态管理和 localStorage
3. **错误处理**: 所有 API 调用都需要适当的错误处理
4. **类型安全**: 充分利用 TypeScript 的类型检查
5. **性能优化**: 合理使用缓存和懒加载

## 常用命令

```bash
# 开发
pnpm run dev

# 构建
pnpm run build

# 数据库
pnpm run db:push
pnpm run db:generate
pnpm run db:status

# 类型检查
pnpm run typecheck
```

这个项目专注于提供优秀的用户体验和现代化的开发体验，请遵循以上规范进行开发。